/** @module recline/forms */

var recline = require('../index'),
		_ = require("underscore"),
		jqtpl = require('jqtpl');

/**
	Sets the dbName, i.e "recline-forms"
	@param {string} string name of database
*/
exports.dbName = function(db) {
	this.dbname = db;
}

/**
	Sets up the form based on the form id
	It emits 'ready' event once the form 
	is ready to be manipulated
	
	@param {string} id id of the form
	@return {Templates} Form
*/
exports.get = function(id, cb){
	
	var self = this;
	if(typeof id != 'string') {
		throw new Error("id must be string");
	}
	
	var
			tClient = new Templates(),
		 	dbname = this.dbname || "templates",
			rev,
			fileName,
			template,
		 	db;
	
	recline.createdb(dbname, function(err, ok){
		if(ok){
			db = recline[dbname];
			tClient.cb = cb;
			tClient.get(id);
		}else{ cb && cb(err,null)}
	});
	
	tClient.__defineGetter__('id', function(){
		return id;
	});
	
	tClient.__defineGetter__('rev', function(){
		return rev;
	});
	
	tClient.__defineSetter__('rev', function(r){
		rev = r;
	});
	
	tClient.__defineGetter__('db', function(){
		return db;
	});
	
	tClient.__defineSetter__('template', function(t){
		template = t;
	});
	
	tClient.__defineGetter__('template', function(){
		return template;
	});
	
	tClient.__defineSetter__('fileName', function(f){
		fileName = f;
	});
	
	tClient.__defineGetter__('fileName', function(){
		return fileName;
	});
	
	tClient._parseArgs = function(args){
		var self = this;
		for(var key in args){
			var arg = args[key];
			if(_.isString(arg)){
				if(arg.indexOf(".")>0){				
					self.fileName = arg;
				}
			}else
			{
				
				self.cb = arg;
			}
		}
	}
	
	return tClient;
	
}


/**
	The main forms Klass
	@class Templates
*/
var Templates = exports.Templates = function(){
}


/**
	Gets the form based on the id
	returns either the form or 404
	if it doesn't exist
*/
Templates.prototype.get = function(id){
	var self = this;
	this.db.getAttachment(this.id, this.id, function(er,res){
		try{
			res = JSON.parse(res);
			self.cb && _.bind(self.cb, self, 404,null)();
		}catch(er){
			self.template = res;
			self.cb && _.bind(self.cb,self,null,res)();
		}
		
	});
}

/**
	Gets the form based on the id
	returns either the form or 404
	if it doesn't exist
*/
Templates.prototype.save = function(){
	var self = this;
	var fs = require('fs');
	self._parseArgs(arguments);
	this.db.saveAttachment(recline.tempDir + self.fileName, this.id, { name: this.id, rev: this.rev }, function(er,res){
		if(er) console.log(er);
		self.cb && _.bind(self.cb, self, null, res)();
	});
}

Templates.prototype.parseForm = function(form, cb){
	var self = this;
	var tmpl = jqtpl.tmpl(self.template,_.extend(form.data, { action: "/"+form.id  }, { parsedFields: form.fields }));
	form.output = tmpl;
	cb && cb(null, tmpl);
}





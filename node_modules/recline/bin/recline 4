#!/usr/bin/env node

var fs = require('fs')
  , exec = require('child_process').exec,
	_ = require('underscore');

var reclineRequirePath = "recline";

var version = "0.0.5"

var moduleName,
	modulePath,
	moduleClassName;

var moduleIndex = "module.exports = require('./<%= moduleName %>');";
var moduleBody = [
'var recline = require("<%= reclinePath %>"),'
,'		_ = require("underscore");'
,''
,'exports.dbName = function(db) {'
,'	this.dbname = db;'
,'}'
,''
,'exports.get = function(id, cb){'
,'	var <%= moduleName %> = this.<%= moduleName %>(id, cb);'
,'	this._setup(<%= moduleName %>,"get",null,<%= moduleName %>.parseFields,cb);'
,'	return <%= moduleName %>;	'
,'}'
,''
,'exports.save = function(id,body,cb){'
,'	var <%= moduleName %> = this.<%= moduleName %>(id, cb);'
,'	this._setup(<%= moduleName %>,"save",body,<%= moduleName %>.validateFields,cb);'
,'	return <%= moduleName %>;	'
,'}'
,''
,'exports.create = function(id,body,cb){'
,'	var <%= moduleName %> = this.<%= moduleName %>(id,cb);'
,'	this._setup(<%= moduleName %>,"create",body,<%= moduleName %>.validateFormSchema,cb);'
,'	return <%= moduleName %>;'
,'}'
,''
,'exports.update = function(id,body,cb){'
,'	var <%= moduleName %> = this.<%= moduleName %>(id,cb);'
,'	this._setup(<%= moduleName %>,"update",body,<%= moduleName %>.validateFormSchema,cb);'
,'	return <%= moduleName %>;'
,'}'
,''
,'exports.delete = function(id,body,cb){'
,'	var <%= moduleName %> = this.<%= moduleName %>(id,cb);'
,'	this._setup(<%= moduleName %>,"delete",body,<%= moduleName %>.validateFormSchema,cb);'
,'	return <%= moduleName %>;'
,'}'
,''
,'exports._setup = function(<%= moduleName %>,type,body,next,cb){'
,'	var dbname = this.dbname || "<%= moduleName %>s";'
,'	if(body){'
,'		if(typeof body === "object"){'
,'			<%= moduleName %>.body = body;'
,'		}else{ '
,'			<%= moduleName %>.body = JSON.parse(body);'
,'		}'
,'	}'
,'	'
,'	if(cb){'
,'		<%= moduleName %>.cb = cb;'
,'	}else{'
,'		<%= moduleName %>.cb = null;'
,'	}'
,'	'
,''
,''
,'	<%= moduleName %>.db = recline[dbname];'
,'	<%= moduleName %>.type = type;'
,'	<%= moduleName %>.getOr404(process);'
,''
,''
,'}'
,''
,'exports.<%= moduleName %> = function(id){'
,'	var self = this;'
,'	if(typeof id != "string") {'
,'		throw new Error("id must be string");'
,'	}'
,'	'
,'	var'
,'	 client = new <%= moduleClass %>();'
,'	'
,'	client.__defineGetter__("id", function(){'
,'		return id;'
,'	});'
,'	'
,'	return client;	'
,'}'
,''
,'var <%= moduleClass %> = exports.<%= moduleClass %> = function(){'
,'}'
,''
].join('\n');



function generate_module(){
	
	modulePath = path+"/"+moduleName;
	makeModuleClassName();	
	mkdir(modulePath, function(){
		var compiled = _.template(moduleIndex);
		write(modulePath + '/index.js', compiled({moduleName:moduleName}));
		var compiled = _.template(moduleBody);
		write(modulePath + '/' +moduleName+ '.js', compiled({ 
			moduleName:moduleName, 
			moduleClass:moduleClassName, 
			reclinePath : reclineRequirePath
			}));
	});
}

function chkdir(path, fn) {
	fs.readdir(path, function(er,res){
		if(er && er.code == "ENOENT"){
			fn && fn();
		}else{
			abort("Error: Directory already exists.");
		}
	});
}

function makeModuleClassName(){
	
	moduleClass = moduleName.replace(moduleName.charAt(0), moduleName.charAt(0).toUpperCase());
	var l = moduleClass.length;
	if(moduleClass.charAt(l-1) != "s"){
		moduleClass = moduleClass + "s";
	}	
	moduleClassName = moduleClass;
}


/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */
function write(path, str) {
  fs.writeFile(path, str);
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}


/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  	chkdir(path, function(){
		exec('mkdir -p ' + path, function(err){
	    if (err) throw err;
	    console.log('   \x1b[36mcreate\x1b[0m : ' + path);
	    fn && fn();
	  });
	});
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.error(str);
  process.exit(1);
}

var args = process.argv.slice(2)
  , path = '.';

while (args.length) {
  var arg = args.shift();
  switch (arg) {
		case '-base':
			reclineRequirePath = "../index";
		break;
    case '-h':
    case '--help':
      abort(usage);
      break;
    case '-v':
    case '--version':
      abort(version);
      break;
	case '-test':
	  exec('nodeunit ./test', function(err, stdout, stderr){
			console.log(stdout);
			console.log(stderr);
			if(err !== null){
				console.log('exec error: ' + err);
			}
		});
	  break;
	case '-m':
	case '--module':
		args.length
	        ? (moduleName = args.shift())
	        : abort('--module requires an argument');
		generate_module();
    default:
        path = arg;
  }
}
